name: Quastrom Annonceur CRM CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "23"
  PROD_PATH: "/var/www/annonceur.quastrom.com/prod"
  STAGING_PATH: "/var/www/annonceur.quastrom.com/staging"
  BACKUP_PATH: "/var/www/annonceur.quastrom.com/backups"
  PROD_URL: "http://annonceur.quastrom.com"
  STAGING_URL: "http://staging.annonceur.quastrom.com"
  SERVER_HOST: ${{ secrets.VPS_HOST }}
  SERVER_USERNAME: ${{ secrets.VPS_USERNAME }}
  SERVER_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
  SERVER_PORT: ${{ secrets.VPS_PORT || 22 }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated dependencies
        run: npm outdated || true

  # Build
  build:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          CI: true

      - name: Test build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Dist directory not found!"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Index.html not found in dist directory!"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Deploy to Staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    # environment: staging
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            # Create backup directory if it doesn't exist
            sudo mkdir -p ${{ env.BACKUP_PATH }}

            # Create backup of current deployment
            if [ -d "${{ env.STAGING_PATH }}" ]; then
              sudo cp -r ${{ env.STAGING_PATH }} ${{ env.BACKUP_PATH }}/staging-backup-$(date +%Y%m%d-%H%M%S)
            fi

            # Cleanup old staging backups (keep last 15)
            sudo find ${{ env.BACKUP_PATH }} -name "staging-backup-*" -type d | sort -r | tail -n +16 | xargs -r sudo rm -rf

            # Create deployment directory
            sudo mkdir -p ${{ env.STAGING_PATH }}
            sudo chown -R ${{ env.SERVER_USERNAME }}:www-data ${{ env.STAGING_PATH }}

      - name: Copy files to staging server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          source: "dist/*"
          target: ${{ env.STAGING_PATH }}
          strip_components: 1

      - name: Configure staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            # Set proper permissions
            sudo chown -R www-data:www-data ${{ env.STAGING_PATH }}
            sudo chmod -R 755 ${{ env.STAGING_PATH }}

            # Health check
            sleep 5
            if curl -f ${{ env.STAGING_URL }}; then
              echo "Staging deployment successful!"
            else
              echo "Staging deployment failed - rolling back"
              LATEST_BACKUP=$(sudo find ${{ env.BACKUP_PATH }} -name "staging-backup-*" -type d | sort -r | head -n 1)
              if [ -n "$LATEST_BACKUP" ]; then
                sudo rm -rf ${{ env.STAGING_PATH }}
                sudo cp -r $LATEST_BACKUP ${{ env.STAGING_PATH }}
                sudo systemctl reload nginx
              fi
              exit 1
            fi

    #   - name: Notify deployment success
    #     if: success()
    #     uses: appleboy/discord-action@v1.0.0
    #     with:
    #       webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID_STAGING }}
    #       webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN_STAGING }}
    #       message: "✅ Staging deployment successful for commit ${{ github.sha }}"

    #   - name: Notify deployment failure
    #     if: failure()
    #     uses: appleboy/discord-action@v1.0.0
    #     with:
    #       webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID_STAGING }}
    #       webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN_STAGING }}
    #       message: "❌ Staging deployment failed for commit ${{ github.sha }}"

  # Deploy to Production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            # Create backup directory if it doesn't exist
            sudo mkdir -p ${{ env.BACKUP_PATH }}

            # Create backup of current deployment
            if [ -d "${{ env.PROD_PATH }}" ]; then
              sudo cp -r ${{ env.PROD_PATH }} ${{ env.BACKUP_PATH }}/prod-backup-$(date +%Y%m%d-%H%M%S)
            fi

            # Cleanup old backups (keep last 5)
            sudo find ${{ env.BACKUP_PATH }} -name "prod-backup-*" -type d | sort -r | tail -n +6 | xargs -r sudo rm -rf

            # Create deployment directory
            sudo mkdir -p ${{ env.PROD_PATH }}
            sudo chown -R ${{ env.SERVER_USERNAME }}:www-data ${{ env.PROD_PATH }}

      - name: Copy files to production server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          source: "dist/*"
          target: ${{ env.PROD_PATH }}
          strip_components: 1

      - name: Configure production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            # Set proper permissions
            sudo chown -R www-data:www-data ${{ env.PROD_PATH }}
            sudo chmod -R 755 ${{ env.PROD_PATH }}

            # Restart Nginx
            sudo systemctl reload nginx

            # Health check
            sleep 5
            if curl -f ${{ env.PROD_URL }}; then
              echo "Deployment successful!"
            else
              echo "Deployment failed - rolling back"
              LATEST_BACKUP=$(sudo find ${{ env.BACKUP_PATH }} -name "prod-backup-*" -type d | sort -r | head -n 1)
              if [ -n "$LATEST_BACKUP" ]; then
                sudo rm -rf ${{ env.PROD_PATH }}
                sudo cp -r $LATEST_BACKUP ${{ env.PROD_PATH }}
                sudo systemctl reload nginx
              fi
              exit 1
            fi

    #   - name: Notify deployment success
    #     if: success()
    #     uses: appleboy/discord-action@v1.0.0
    #     with:
    #       webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID_PRODUCTION }}
    #       webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN_PRODUCTION }}
    #       message: "✅ Production deployment successful for commit ${{ github.sha }}"

    #   - name: Notify deployment failure
    #     if: failure()
    #     uses: appleboy/discord-action@v1.0.0
    #     with:
    #       webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID_PRODUCTION }}
    #       webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN_PRODUCTION }}
    #       message: "❌ Production deployment failed for commit ${{ github.sha }}"
